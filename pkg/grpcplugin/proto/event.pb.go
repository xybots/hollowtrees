// Code generated by protoc-gen-go.
// source: event.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	event.proto

It has these top-level messages:
	CloudEvent
	Result
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type CloudEvent struct {
	Specversion string            `protobuf:"bytes,1,opt,name=specversion" json:"specversion,omitempty"`
	Type        string            `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Source      string            `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	Id          string            `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	Time        string            `protobuf:"bytes,5,opt,name=time" json:"time,omitempty"`
	Schemaurl   string            `protobuf:"bytes,6,opt,name=schemaurl" json:"schemaurl,omitempty"`
	Contenttype string            `protobuf:"bytes,7,opt,name=contenttype" json:"contenttype,omitempty"`
	Data        []byte            `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Extensions  map[string]string `protobuf:"bytes,9,rep,name=extensions" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CloudEvent) Reset()                    { *m = CloudEvent{} }
func (m *CloudEvent) String() string            { return proto1.CompactTextString(m) }
func (*CloudEvent) ProtoMessage()               {}
func (*CloudEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CloudEvent) GetSpecversion() string {
	if m != nil {
		return m.Specversion
	}
	return ""
}

func (m *CloudEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CloudEvent) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *CloudEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CloudEvent) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *CloudEvent) GetSchemaurl() string {
	if m != nil {
		return m.Schemaurl
	}
	return ""
}

func (m *CloudEvent) GetContenttype() string {
	if m != nil {
		return m.Contenttype
	}
	return ""
}

func (m *CloudEvent) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CloudEvent) GetExtensions() map[string]string {
	if m != nil {
		return m.Extensions
	}
	return nil
}

type Result struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto1.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto1.RegisterType((*CloudEvent)(nil), "proto.CloudEvent")
	proto1.RegisterType((*Result)(nil), "proto.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventHandler service

type EventHandlerClient interface {
	Handle(ctx context.Context, in *CloudEvent, opts ...grpc.CallOption) (*Result, error)
}

type eventHandlerClient struct {
	cc *grpc.ClientConn
}

func NewEventHandlerClient(cc *grpc.ClientConn) EventHandlerClient {
	return &eventHandlerClient{cc}
}

func (c *eventHandlerClient) Handle(ctx context.Context, in *CloudEvent, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.EventHandler/Handle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventHandler service

type EventHandlerServer interface {
	Handle(context.Context, *CloudEvent) (*Result, error)
}

func RegisterEventHandlerServer(s *grpc.Server, srv EventHandlerServer) {
	s.RegisterService(&_EventHandler_serviceDesc, srv)
}

func _EventHandler_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EventHandler/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).Handle(ctx, req.(*CloudEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EventHandler",
	HandlerType: (*EventHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handle",
			Handler:    _EventHandler_Handle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}

func init() { proto1.RegisterFile("event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x50, 0x41, 0x4f, 0xf2, 0x40,
	0x10, 0xfd, 0x5a, 0xa0, 0x9f, 0x0c, 0xa8, 0xb8, 0x31, 0x66, 0x43, 0x3c, 0x54, 0x2e, 0x72, 0x30,
	0x3d, 0xe0, 0xc5, 0x18, 0x39, 0x88, 0x21, 0xe1, 0x48, 0xfa, 0x0f, 0x96, 0x76, 0x12, 0x1a, 0xb7,
	0xbb, 0x64, 0x77, 0x8b, 0xe2, 0xef, 0xf4, 0x07, 0x99, 0x9d, 0x56, 0x69, 0xf4, 0xd4, 0x79, 0xef,
	0xed, 0x7b, 0x7d, 0x33, 0x30, 0xc0, 0x3d, 0x2a, 0x97, 0xec, 0x8c, 0x76, 0x9a, 0xf5, 0xe8, 0x33,
	0xf9, 0x0c, 0x01, 0x5e, 0xa4, 0xae, 0xf2, 0xa5, 0xd7, 0x58, 0x0c, 0x03, 0xbb, 0xc3, 0x6c, 0x8f,
	0xc6, 0x16, 0x5a, 0xf1, 0x20, 0x0e, 0xa6, 0xfd, 0xb4, 0x4d, 0x31, 0x06, 0x5d, 0x77, 0xd8, 0x21,
	0x0f, 0x49, 0xa2, 0x99, 0x5d, 0x41, 0x64, 0x75, 0x65, 0x32, 0xe4, 0x1d, 0x62, 0x1b, 0xc4, 0xce,
	0x20, 0x2c, 0x72, 0xde, 0x25, 0x2e, 0x2c, 0x72, 0xf2, 0x16, 0x25, 0xf2, 0x5e, 0xe3, 0x2d, 0x4a,
	0x64, 0xd7, 0xd0, 0xb7, 0xd9, 0x16, 0x4b, 0x51, 0x19, 0xc9, 0x23, 0x12, 0x8e, 0x84, 0xef, 0x93,
	0x69, 0xe5, 0x50, 0x39, 0xfa, 0xe9, 0xff, 0xba, 0x4f, 0x8b, 0xf2, 0x99, 0xb9, 0x70, 0x82, 0x9f,
	0xc4, 0xc1, 0x74, 0x98, 0xd2, 0xcc, 0x9e, 0x01, 0xf0, 0xdd, 0xa1, 0xf2, 0x85, 0x2d, 0xef, 0xc7,
	0x9d, 0xe9, 0x60, 0x76, 0x53, 0xef, 0x9d, 0x1c, 0x97, 0x4d, 0x96, 0x3f, 0x6f, 0x96, 0xca, 0x99,
	0x43, 0xda, 0x32, 0x8d, 0xe7, 0x70, 0xfe, 0x4b, 0x66, 0x23, 0xe8, 0xbc, 0xe2, 0xa1, 0xb9, 0x89,
	0x1f, 0xd9, 0x25, 0xf4, 0xf6, 0x42, 0x56, 0xdf, 0xc7, 0xa8, 0xc1, 0x63, 0xf8, 0x10, 0x4c, 0x62,
	0x88, 0x52, 0xb4, 0x95, 0x74, 0x74, 0x1b, 0x27, 0x5c, 0x65, 0x1b, 0x63, 0x83, 0x66, 0x4f, 0x30,
	0xa4, 0x16, 0x2b, 0xa1, 0x72, 0x89, 0x86, 0xdd, 0x41, 0x54, 0x8f, 0xec, 0xe2, 0x4f, 0xd3, 0xf1,
	0x69, 0x43, 0xd5, 0x99, 0x93, 0x7f, 0x8b, 0x39, 0xdc, 0x66, 0xba, 0x4c, 0x36, 0x42, 0x7d, 0x88,
	0x22, 0xf3, 0x0f, 0x93, 0xad, 0x96, 0x52, 0xbf, 0x39, 0x83, 0x68, 0x93, 0x2d, 0x25, 0x91, 0x77,
	0x31, 0x5a, 0x1d, 0xc1, 0xda, 0xa7, 0xac, 0x83, 0x4d, 0x44, 0x71, 0xf7, 0x5f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x30, 0x95, 0x57, 0x04, 0x12, 0x02, 0x00, 0x00,
}
